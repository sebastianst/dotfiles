global !p
FIELDS = {
	't': "title",
	'a': "author",
	'n': "notice",
	'd': "dev",
	'p': "param",
	'r': "return"
}

def expand_natspec(snip, nd, ad = None):
	body = "/**\n"
	i = 0
	for i, x in enumerate(nd):
		body += (" * @" + FIELDS[x] + f" ${i+1}\n")
	if ad:
		for a in ad:
			typ, args = FIELDS[a[0]], snip.tabstops[a[1]].current_text
			for line in natspec_lines(typ, args):
				i += 1
				body += (line + f" ${i+1}\n")
	body += " */$0"
	snip.expand_anon(body)

def natspec_lines(typ, args):
	return (f" * @{typ} " + p.split(" ")[-1] for p in args.split(","))

endglobal

post_jump "if snip.tabstop == 0: expand_natspec( snip, 'tand' )"
snippet con "contract with natspec" b
$0
contract ${1:Contract} {
}
endsnippet

post_jump "if snip.tabstop == 0: expand_natspec( snip, 'tand' )"
snippet intf "interface with natspec" b
$0
interface ${1:IContract} {
}
endsnippet

post_jump "if snip.tabstop == 0: expand_natspec( snip, 'nd', [('p', 2)] )"
snippet ev "event with natspec" b
$0
event ${1:Event}(${2});
endsnippet

post_jump "if snip.tabstop == 0: expand_natspec( snip, 'nd', [('p', 2)] )"
snippet fn "function with natspec" b
$0
function ${1:func}(${2}) ${3}
endsnippet

post_jump "if snip.tabstop == 0: expand_natspec( snip, 'nd', [('p', 2), ('r', 4)] )"
snippet fnr "function (with return) with natspec" b
$0
function ${1:func}(${2}) ${3} returns (${4})
endsnippet

post_jump "expand_natspec(snip, match.group(1))"
snippet "/([tandpr]+)" "natspec with dynamic @title, @author, @notice, @dev, @param, and @return" br
endsnippet
